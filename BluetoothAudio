#!/usr/bin/env python

#   Bluetooth Audio
#   Dominique Da Silva https://github.com/atika
#   January 2016
#   v1.1

# PyOBJc : pip install -U pyobjc
# export PYTHONPATH="/System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python/"

import objc
import Foundation

import os
import sys
import getopt
import time
import re

from IOBluetooth import *

switchaudiotest = os.system('test -x /usr/local/bin/SwitchAudioSource')
if switchaudiotest != 0:
    print "SwitchAudio not found, please install SwitchAudio:\nbrew install switchaudio-osx"
    sys.exit(1)

# NSUserNotification
def notify(title, subtitle, info_text, delay=0, sound=False, userInfo={}):
    NSUserNotification = objc.lookUpClass('NSUserNotification')
    NSUserNotificationCenter = objc.lookUpClass('NSUserNotificationCenter')
    notification = NSUserNotification.alloc().init()
    notification.setTitle_(title)
    notification.setSubtitle_(subtitle)
    notification.setInformativeText_(info_text)
    notification.setUserInfo_(userInfo)
    if sound:
        notification.setSoundName_("NSUserNotificationDefaultSoundName")
    notification.setDeliveryDate_(Foundation.NSDate.dateWithTimeInterval_sinceDate_(delay, Foundation.NSDate.date()))
    NSUserNotificationCenter.defaultUserNotificationCenter().scheduleNotification_(notification)

def usage():
    print "\nUsage: "+sys.argv[0]+" --name \"deviceName\" --address \"deviceAddress\""
    print "Options:"
    print "   %-20s: %s" % ("-n, --name", "Name of the bluetooth device")
    print "   %-20s: %s" % ("-a, --address", "Mac address of the bluetooth device")
    print "   %-20s: %s" % ("-d, --disconnect", "Disconnect the device")

    # List Bluetooth Audio Device
    paired_devices = IOBluetoothDevice.pairedDevices()
    devices = []

    for d in paired_devices:
        connected   = d.isConnected()
        majorClass  = d.deviceClassMajor()
        deviceName  = d.getNameOrAddress()
        deviceTitle = deviceName + ' (connected)' if connected else deviceName
        device = {}

        if majorClass == 4:
            device['name'] = deviceName
            device['address'] = d.addressString()
            devices.append(device)

    if len(devices) == 0:
        print "\nNo audio devices found!"
    else:
        print "\nBluetooth Audio Devices:"
        for (i, device) in enumerate(devices):
            print ("- %s: %s" % (device["name"], device["address"]))
        print ''

def main(argv):
    deviceName = ''
    deviceAddress = ''
    disconnect = bool(0)

    try:
        # GET OPTIONS
        opts, args = getopt.getopt(argv, "hdn:a:", ["help", "disconnect", "name=", "address="])
    except getopt.GetoptError:
        usage()
        sys.exit(2)

    for opt, arg in opts:
        if opt in ("-h", "--help"):
            usage()
            sys.exit()
        elif opt in ("-d", "--disconnect"):
            disconnect = bool(1)
        elif opt in ("-n", "--name"):
            deviceName = arg
        elif opt in ("-a", "--address"):
            deviceAddress = arg

    # Activate Bluetooth Device
    if re.match("[0-9a-f]{2}([-:])[0-9a-f]{2}(\\1[0-9a-f]{2}){4}$", deviceAddress.lower()):
        device = IOBluetoothDevice.deviceWithAddressString_(deviceAddress)

        # Disconnect device
        if disconnect:
            notify("Bluetooth Audio", deviceName+' Bluetooth device disconnected', "", 0, sound=False)
            print deviceName+' Bluetooth device disconnected'
            device.closeConnection()
        else:
            # Connect device and set system audio output
            device.openConnection()
            time.sleep(1)
            result = os.system('/usr/local/bin/SwitchAudioSource -s "%s" >/dev/null' % (deviceName))
            if result != 0:
                notify("Bluetooth Error", "Error when switching audio output to "+deviceName, "", 0, sound=False)
            else:
                notify("Bluetooth Audio", deviceName+" Connected", "Bluetooth Audio switched audio output.", 0, sound=False)
                print deviceName+" Connected"
    else:
        print "Not a valid mac address"
        notify("Bluetooth Audio Error", "Not a valid mac address", "", 0, sound=False)
        sys.exit(1)

if __name__ == "__main__":
    if len(sys.argv) > 1:
        main(sys.argv[1:])
    else:
        usage()
